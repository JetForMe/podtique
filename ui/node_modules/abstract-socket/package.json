{
  "author": {
    "name": "Saúl Ibarra Corretgé",
    "email": "saghul@gmail.com",
    "url": "http://bettercallsaghul.com"
  },
  "name": "abstract-socket",
  "version": "1.0.1",
  "description": "Abstract domain socket support for Node / io.js",
  "main": "lib/abstract_socket",
  "homepage": "https://github.com/saghul/node-abstractsocket",
  "license": {
    "type": "MIT",
    "url": "https://github.com/saghul/node-abstractsocket/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/saghul/node-abstractsocket.git"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "bindings": "~1.1.1",
    "nan": "~1.8.0"
  },
  "os": [
    "linux"
  ],
  "devDependencies": {},
  "optionalDependencies": {},
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "# node-abstractsocket\n\nBecause I like my sockets like my Picasso paintings: abstract.\n\n\n## Abstract what?\n\nGo read this: http://man7.org/linux/man-pages/man7/unix.7.html, I'll wait.\n\n\n## Examples\n\nServer:\n\n```js\n// abstract echo server\nvar abs = require('./lib/abstract_socket');\n\nvar server = abs.createServer(function(c) { //'connection' listener\n  console.log('client connected');\n  c.on('end', function() {\n    console.log('client disconnected');\n  });\n  c.write('hello\\r\\n');\n  c.pipe(c);\n});\nserver.listen('\\0foo');\n\n```\n\nClient:\n\n```js\nvar abs = require('./lib/abstract_socket');\n\nvar client = abs.connect('\\0foo', function() { //'connect' listener\n    console.log('client connected');\n});\n\nclient.on('data', function(data) {\n    console.log(data.toString());\n});\n\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('readable', function() {\n    var chunk = process.stdin.read();\n    if (chunk !== null)\n        client.write(chunk);\n});\n\n```\n\n\n## API\n\n### abs.createServer(connectionListener)\n\nReturns a new `AbstractSocketServer` object. `listen` can be called on\nit passing the name of the abstract socket to bind to and listen, it follows\nthe API used for normal Unix domain sockets. NOTE: you must prepend the path with\nthe NULL byte ('\\0') to indicate it's an abstract socket.\n\nThrows an exception if the `socket(2)` system call fails.\n\n### AbstractSocketServer.listen(name, [callback]\n\nBinds the server to the specified abstract socket name.\n\nThrows an exception if the `bind(2)` system call fails, or the given `name`\nis invalid.\n\nThis function is asynchronous. When the server has been bound, 'listening' event\nwill be emitted. the last parameter callback will be added as an listener for the\n'listening' event.\n\n### abs.connect(name, connectListener)\n\nCreates a connection to the given `path` in the abstract domain. NOTE: you must\nprepend the path with the NULL byte ('\\0') to indicate it's an abstract\nsocket.\n\nReturns a new and connected net.Socket object.\n\nThrows an exception if the `socket(2)` or `connect(2)` system calls fail,\nor the given `name` is invalid.\n\n\n## Thanks\n\nI borrowed massive amounts of inspiration/code from node-unix-dgram by @bnoordhuis :-)\n\n@mmalecki taught me how to inherit like a pro.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/saghul/node-abstractsocket/issues"
  },
  "_id": "abstract-socket@1.0.1",
  "dist": {
    "shasum": "8031d7dd952e4bb1f61a10dd9276871113c92717"
  },
  "_from": "abstract-socket@",
  "_resolved": "https://registry.npmjs.org/abstract-socket/-/abstract-socket-1.0.1.tgz"
}
